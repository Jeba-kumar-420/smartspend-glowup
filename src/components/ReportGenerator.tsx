import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useApp } from "@/contexts/AppContext";
import { useToast } from "@/hooks/use-toast";
import { Download, FileText, Calendar, DollarSign, TrendingUp } from "lucide-react";
import { format } from "date-fns";
import jsPDF from 'jspdf';

export const ReportGenerator = () => {
  const { user, expenses, formatCurrency, getTotalSpending, getSpendingByCategory } = useApp();
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [isOpen, setIsOpen] = useState(false);

  const generatePDFReport = async () => {
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      
      // Header
      pdf.setFontSize(24);
      pdf.setFont(undefined, 'bold');
      pdf.text('SmartSpend Financial Report', pageWidth / 2, 30, { align: 'center' });
      
      // User info
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      pdf.text(`Generated for: ${user?.name || 'User'}`, 20, 50);
      pdf.text(`Email: ${user?.email || 'N/A'}`, 20, 60);
      pdf.text(`Report Date: ${format(new Date(), 'MMMM dd, yyyy')}`, 20, 70);
      
      // Summary section
      pdf.setFontSize(16);
      pdf.setFont(undefined, 'bold');
      pdf.text('Spending Summary', 20, 90);
      
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      const todaySpending = getTotalSpending('today');
      const weekSpending = getTotalSpending('week');
      const monthSpending = getTotalSpending('month');
      
      pdf.text(`Today: ${formatCurrency(todaySpending)}`, 20, 105);
      pdf.text(`This Week: ${formatCurrency(weekSpending)}`, 20, 115);
      pdf.text(`This Month: ${formatCurrency(monthSpending)}`, 20, 125);
      
      // Category breakdown
      pdf.setFontSize(16);
      pdf.setFont(undefined, 'bold');
      pdf.text('Spending by Category', 20, 145);
      
      const categorySpending = getSpendingByCategory();
      let yPosition = 160;
      
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      
      Object.entries(categorySpending).forEach(([category, amount]) => {
        pdf.text(`${category}: ${formatCurrency(amount)}`, 20, yPosition);
        yPosition += 10;
      });
      
      // Recent transactions
      if (expenses.length > 0) {
        yPosition += 10;
        pdf.setFontSize(16);
        pdf.setFont(undefined, 'bold');
        pdf.text('Recent Transactions', 20, yPosition);
        yPosition += 15;
        
        pdf.setFontSize(10);
        pdf.setFont(undefined, 'normal');
        
        const recentExpenses = expenses.slice(0, 10);
        recentExpenses.forEach((expense) => {
          if (yPosition > 270) { // Start new page if needed
            pdf.addPage();
            yPosition = 20;
          }
          
          const dateStr = format(new Date(expense.date), 'MM/dd/yyyy');
          const text = `${dateStr} - ${expense.category} - ${formatCurrency(expense.amount)}`;
          pdf.text(text, 20, yPosition);
          
          if (expense.note) {
            yPosition += 8;
            pdf.setFont(undefined, 'italic');
            pdf.text(`Note: ${expense.note}`, 25, yPosition);
            pdf.setFont(undefined, 'normal');
          }
          
          yPosition += 12;
        });
      }
      
      // Footer
      pdf.setFontSize(8);
      pdf.text('Generated by SmartSpend', 20, pdf.internal.pageSize.getHeight() - 10);
      
      // Save the PDF
      const fileName = `SmartSpend_Report_${format(new Date(), 'yyyy-MM-dd')}.pdf`;
      pdf.save(fileName);
      
      toast({
        title: "Report Generated",
        description: "Your financial report has been downloaded successfully.",
      });
      
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate report. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
      setIsOpen(false);
    }
  };

  const todaySpending = getTotalSpending('today');
  const weekSpending = getTotalSpending('week');
  const monthSpending = getTotalSpending('month');
  const categorySpending = getSpendingByCategory();

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" className="gap-2">
          <Download className="h-4 w-4" />
          Generate Report
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Financial Report Preview
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          {/* Summary Cards */}
          <div className="grid grid-cols-3 gap-3">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-xs flex items-center gap-1">
                  <Calendar className="h-3 w-3" />
                  Today
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-sm font-bold text-success">
                  {formatCurrency(todaySpending)}
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-xs flex items-center gap-1">
                  <TrendingUp className="h-3 w-3" />
                  Week
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-sm font-bold text-info">
                  {formatCurrency(weekSpending)}
                </div>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-xs flex items-center gap-1">
                  <DollarSign className="h-3 w-3" />
                  Month
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-sm font-bold text-warning">
                  {formatCurrency(monthSpending)}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Category Breakdown */}
          <Card>
            <CardHeader className="pb-3">
              <CardTitle className="text-sm">Category Breakdown</CardTitle>
            </CardHeader>
            <CardContent>
              {Object.keys(categorySpending).length > 0 ? (
                <div className="space-y-2">
                  {Object.entries(categorySpending).map(([category, amount]) => (
                    <div key={category} className="flex justify-between text-sm">
                      <span className="capitalize">{category}</span>
                      <span className="font-medium">{formatCurrency(amount)}</span>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-sm text-muted-foreground text-center py-4">
                  No spending data available
                </div>
              )}
            </CardContent>
          </Card>

          {/* Report Info */}
          <div className="bg-muted/50 p-3 rounded-lg text-xs text-muted-foreground">
            <div className="font-medium mb-1">Report will include:</div>
            <ul className="space-y-1">
              <li>• Complete spending summary</li>
              <li>• Category-wise breakdown</li>
              <li>• Recent transaction history</li>
              <li>• User profile information</li>
            </ul>
          </div>

          {/* Action Button */}
          <Button 
            onClick={generatePDFReport} 
            disabled={isGenerating}
            className="w-full"
          >
            {isGenerating ? (
              <>Generating Report...</>
            ) : (
              <>
                <Download className="mr-2 h-4 w-4" />
                Download PDF Report
              </>
            )}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
};